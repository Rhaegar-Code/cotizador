{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Resumen.js","componentes/Resultado.js","componentes/App.js","helpers.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","titulo","Formulario","state","marcaRef","React","createRef","yearRef","planBasicoRef","planCompletoRef","cotizarSeguro","e","plan","_this","current","checked","infoAuto","marca","value","year","currentTarget","reset","preventDefault","className","onSubmit","this","name","ref","type","Component","Resumen","mostraResumen","_this$props$datos","datos","Resultado","resultado","TransitionGroup","component","CSSTransition","classNames","key","timeout","enter","exit","App","Date","getFullYear","obtenerDiferenciaAnio","modelo","incremento","calcularMarca","obteniendoPlan","obtenerPlan","parseFloat","toFixed","datosAuto","setState","console","log","componentes_Header","componentes_Formulario","componentes_Resumen","componentes_Resultado","Boolean","window","location","hostname","match","ReactDOM","render","componentes_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.591cba2e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) => {\r\n    return ( \r\n        <header>\r\n            <h1>{props.titulo}</h1>\r\n        </header>\r\n     );\r\n}\r\n \r\nexport default Header;","import React,{Component} from  'react';\r\n\r\nclass Formulario extends Component {\r\n\r\n    state = {  }\r\n\r\n    // Los refs son para obtener los valores de los inputs\r\n\r\n    marcaRef = React.createRef();\r\n    yearRef = React.createRef();\r\n    planBasicoRef = React.createRef();\r\n    planCompletoRef = React.createRef();\r\n\r\n    cotizarSeguro =(e)=>{\r\n\r\n        const plan = this.planBasicoRef.current.checked ? 'basico' : 'completo'\r\n\r\n        // Obtener los datos\r\n        // console.log(this.marcaRef.current.value);\r\n\r\n        // Cremos el objeto que tendra nuestros valores\r\n        const infoAuto = {\r\n            marca: this.marcaRef.current.value,\r\n            year:  this.yearRef.current.value,\r\n            plan:  plan\r\n        }\r\n\r\n        // Ya enviada la funciion el componente padre estos datos son llevados por props.\r\n        this.props.cotizarSeguro(infoAuto);\r\n        \r\n        // Reseteando el formulario\r\n\r\n        e.currentTarget.reset();\r\n\r\n        e.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"cotizar-auto\" onSubmit={this.cotizarSeguro}>\r\n                <div className=\"campo\">\r\n                    <label>Marca</label>\r\n                    <select name=\"marca\" ref={this.marcaRef} >\r\n                        <option value=\"americano\">Americano</option>\r\n                        <option value=\"europeo\">Europeo</option>\r\n                        <option value=\"asiatico\">Asiatico</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"campo\">\r\n                    <label>Año</label>\r\n                    <select name=\"year\" ref={this.yearRef}>\r\n                        <option value=\"2018\">2018</option>\r\n                        <option value=\"2017\">2017</option>\r\n                        <option value=\"2016\">2016</option>\r\n                        <option value=\"2015\">2015</option>\r\n                        <option value=\"2014\">2014</option>\r\n                        <option value=\"2013\">2013</option>\r\n                        <option value=\"2012\">2012</option>\r\n                        <option value=\"2011\">2011</option>\r\n                        <option value=\"2010\">2010</option>\r\n                        <option value=\"2009\">2009</option>\r\n                        <option value=\"2008\">2008</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"campo\">\r\n                    <label>Plan:</label>\r\n                    <input type=\"radio\" ref={this.planBasicoRef} name=\"plan\" value=\"basico\"/> Básico\r\n                    <input type=\"radio\" ref={this.planCompletoRef} name=\"plan\" value=\"completo\"/> Completo\r\n                </div>\r\n\r\n                <button type=\"submit\" className=\"boton\">Cotizar</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Formulario;","import React, {Component} from 'react';\r\n\r\nclass Resumen extends Component {\r\n\r\n    mostraResumen = () => {\r\n        const {marca,year,plan} = this.props.datos\r\n\r\n        if(!marca || !year || !plan) return null\r\n\r\n        return (\r\n            <div className=\"resumen\">\r\n                <h2>Resumen de Cotizacion</h2>\r\n                <li>Marca: {marca}</li>\r\n                <li>Year: {year}</li>\r\n                <li>Plan: {plan}</li>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    state = {  }\r\n    render() { \r\n\r\n        return ( \r\n            <div>\r\n                {this.mostraResumen()}\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Resumen;","import React, { Component } from 'react'; \r\nimport {TransitionGroup,CSSTransition} from 'react-transition-group'\r\n\r\nclass Resultado extends Component {\r\n    state = {  }\r\n    render() { \r\n        const resultado = this.props.resultado;\r\n        return ( \r\n            <div className=\"gran-total\">\r\n                <TransitionGroup className=\"resultado\" component=\"span\">\r\n                    <CSSTransition\r\n                        classNames=\"resultado\"\r\n                        key={resultado}\r\n                        timeout= {{enter:500,exit:500}}>\r\n                        <span>${resultado}</span>\r\n                    </CSSTransition>\r\n                </TransitionGroup>\r\n            </div>\r\n         )\r\n    }\r\n}\r\n \r\nexport default Resultado;","import React, {Component} from 'react';\nimport Header from './Header'\nimport Formulario from './Formulario'\nimport Resumen from './Resumen'\nimport Resultado from './Resultado'\nimport {obtenerDiferenciaAnio,calcularMarca,obtenerPlan} from '../helpers'\n\nclass App extends Component {\n\n  state = {\n    resultado : '',\n    datos: {}\n  }\n\n  // Creamos la funcion que recibire los datos del componente formulario\n  cotizarSeguro = (datos) => {\n    const {marca,plan,year} = datos;\n\n    let resultado = 2000;\n\n    const diferencia = obtenerDiferenciaAnio(year);\n\n    resultado -= ((diferencia * 3) * resultado) / 100;\n    \n    resultado = calcularMarca(marca) * resultado;\n\n    let obteniendoPlan = obtenerPlan(plan)\n\n    resultado = parseFloat(obteniendoPlan * resultado).toFixed(2);\n\n\n    const datosAuto = {\n      marca: marca,\n      year: year,\n      plan:plan\n    }\n\n    this.setState({\n      resultado: resultado,\n      datos: datosAuto\n    })\n    console.log(resultado);\n  }\n\n  render() { \n    return (\n      <div className=\"contenedor\">\n        <Header titulo=\"Cotizador de seguro de autos\"/>\n        \n        <div className=\"contenedor-formulario\">\n          <Formulario \n          // Esta funcion sera enviada al componente para recibir esos datos\n          cotizarSeguro = {this.cotizarSeguro}\n          />\n          <Resumen\n          datos = {this.state.datos}\n          />\n           <Resultado\n            resultado = {this.state.resultado}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export function obtenerDiferenciaAnio(year) {\r\n   return new Date().getFullYear() - year;\r\n}\r\n\r\nexport function calcularMarca( modelo ) {\r\n    let incremento;\r\n\r\n    switch (modelo) {\r\n        case 'europeo':\r\n            incremento = 1.30;\r\n            break;\r\n        case 'americano':\r\n            incremento = 1.15;\r\n            break;\r\n        case 'asiatico':\r\n            incremento = 1.05;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return incremento;\r\n}\r\nexport function obtenerPlan( plan ) {\r\n    return (plan === 'basico') ? 1.20 : 1.50;\r\n}\r\nexport function primeraMayuscula(texto) {\r\n    return texto.charAt(0).toUpperCase() + texto.slice(1);\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './componentes/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}